   ## Maps config file
   include conf_m2/maps.conf;

   ## certbot-auto renew --cert-name example.com
#   server {
#   listen 80;
#   server_name DOMAIN_PLACEHOLDER;
#   root $MAGE_ROOT/pub;
#    
#   location ~ /\.well-known/acme-challenge {
#   }
#
#   location / { return 301 https://DOMAIN_PLACEHOLDER$request_uri;  }
#  }

   ## Proxy server to terminate ssl before varnish
   server {
   listen 80;
#  listen 443 ssl;
#  http2 on;
   server_name DOMAIN_PLACEHOLDER;
   
   root $MAGE_ROOT/pub;

   ## SSL key and cert location
#    ssl_certificate     /etc/letsencrypt/live/DOMAIN_PLACEHOLDER/fullchain.pem; 
#    ssl_certificate_key /etc/letsencrypt/live/DOMAIN_PLACEHOLDER/privkey.pem;
   
    ## Gzipping is an easy way to reduce page weight
    gzip                on;
    gzip_vary           on;
    gzip_proxied        any;
    gzip_types          application/javascript application/x-javascript application/rss+xml text/javascript text/css text/plain image/x-icon image/svg+xml;
    gzip_buffers        4 16k;
    gzip_comp_level     6;
    
    # Brotli compression alternative to Gzip
    #brotli              on;
    #brotli_types        text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap;
    #brotli_comp_level   8;

   if ($block_cidr) { return 403; }
   if ($bad_client) { return 403; }

   ## Extra protection rules
   include conf_m2/extra_protect.conf;

   ## Protect admin path
   include conf_m2/admin_protect.conf;

   ## Error log/page
     #include conf_m2/error_page.conf;

   ## sitemap and feeds?
     include conf_m2/sitemap.conf;
   
   ## phpMyAdmin configuration	
     include conf_m2/phpmyadmin.conf;
     
   ## Server maintenance block.
     include conf_m2/maintenance.conf;
   
   ## Static files push only
     include conf_m2/static.conf;

   ## Proxy-pass to Varnish
   location / { proxy_pass http://varnish; }

 }

  server {
   listen 127.0.0.1:8080;
   server_name DOMAIN_PLACEHOLDER;

   root $MAGE_ROOT/pub;

   ## Nginx and php-fpm status
   include conf_m2/status.conf;
	
   ## Deny all internal locations
   location ~ ^/(app|generated|lib|bin|var|tmp|phpserver|vendor)/ { 
     deny all; 
   }
	   
   location / {
     try_files $uri $uri/ /index.php$is_args$args;
   }
	
   ## Product images and all media/ files
   include conf_m2/media.conf;
	   
   ## Process php files (strict rule, define files to be executed)
   location ~ ^/(index|health_check|get|static|errors/(report|404|503))\.php$ {
     try_files $uri =404;
#    fastcgi_intercept_errors on;
     include conf_m2/php_backend.conf;
     
     ## PWA Studio env hack
#    fastcgi_param MAGENTO_BACKEND_URL $host;    
     
     ## Enable Magento profiler
#    fastcgi_param MAGE_PROFILER $MAGE_PROFILER;
#    fastcgi_param MAGE_DB_PROFILER $MAGE_DB_PROFILER;

     ## Store code with multi domain
#    fastcgi_param   MAGE_RUN_CODE $MAGE_RUN_CODE;
#    fastcgi_param   MAGE_RUN_TYPE $MAGE_RUN_TYPE;

     ## Enable POST logging
#    if ($request_method = POST) {set $ispostlog A;}
#    if ($request_uri ~* "/LOCATION_PLACEHOLDER/") {set $ispostlog "${ispostlog}B";}
#    if ($ispostlog = AB) { access_log /var/log/nginx/postlog.log postlog;}
   }
	
   ## Block other undefined php files, possible injections and random malware hooks.
   location ~* \.php$ { 
     return 404; 
   }
  }
